plugins {
  id 'checkstyle'
  id 'com.diffplug.spotless' version '6.23.3'
  id 'org.openapi.generator' version '7.2.0'
  id 'org.springframework.boot' version '3.2.1'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'jacoco'
  id 'com.google.cloud.tools.jib' version '1.4.0'
  id 'nebula.lint' version '19.0.1'
  id 'net.ltgt.errorprone' version '3.1.0' apply false
}

if (!hasProperty('skipErrorProne')) {
  apply plugin: 'net.ltgt.errorprone'
}

allprojects {
  apply plugin: 'java'
  sourceCompatibility =17
  targetCompatibility = 17
}

allprojects {
  repositories {
    mavenCentral()
  }

  tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  test { jvmArgs '-XX:TieredStopAtLevel=1' }

  gradleLint {
    rules = [
      'all-nebula-renames',
      'duplicate-dependency-class',
      'unused-exclude-by-dep'
    ]
  }
}

group = 'org.springframework.samples'
version = '1.0.0-SNAPSHOT'




configurations {
  checkstyleConfig
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
  compileOnly {
    extendsFrom annotationProcessor
  }
}

ext {
  set('checkstyleVersion', '8.30')
  set('mapstructVersion', '1.3.0.Final')
  set('lombokVersion', '1.18.30')
  set('jetbrainsAnnotationsVersion', '19.0.0')
}

dependencies {
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  // Spring and Spring Boot dependencies
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  gradleLint.ignore('duplicate-dependency-class') {
    annotationProcessor 'com.uber.nullaway:nullaway:0.7.9'
  }
  testImplementation "org.projectlombok:lombok:${lombokVersion}"
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
  testImplementation 'com.tngtech.archunit:archunit-junit4:0.22.0'

  implementation project(':server-generated')

  // Databases - Uses HSQL by default
  runtimeOnly 'org.hsqldb:hsqldb'
  // runtime 'mysql:mysql-connector-java'

  // EhCache
  implementation 'javax.cache:cache-api'
  implementation 'org.ehcache:ehcache'

  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

  implementation 'com.atlassian.oai:swagger-request-validator-spring-webmvc:2.39.0'
  compileOnly "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"
  testImplementation "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

  checkstyleConfig("com.puppycrawl.tools:checkstyle:${checkstyleVersion}") { transitive = false }
  if (!hasProperty('skipErrorProne')) {
    errorprone 'com.google.errorprone:error_prone_core:2.24.0'
    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
  }
}

compileJava {
  options.compilerArgs = [
    '-Amapstruct.suppressGeneratorTimestamp=true',
    '-Amapstruct.suppressGeneratorVersionInfoComment=true',
    '-Amapstruct.defaultComponentModel=spring'
  ]
}

import net.ltgt.gradle.errorprone.CheckSeverity

tasks.withType(JavaCompile) {
  if (!hasProperty('skipErrorProne')) {
    options.errorprone.disableWarningsInGeneratedCode = true

    if (!name.toLowerCase().contains("test")) {
      options.errorprone {
        check('NullAway', CheckSeverity.ERROR)
        option('NullAway:AnnotatedPackages', 'org.springframework.samples.petclinic')
        option('NullAway:TreatGeneratedAsUnannotated')
      }
    }
  }
}

spotless {
  java { googleJavaFormat('1.10.0') }
  groovyGradle {
    //paddedCell() // Avoid cyclic ambiguities
    greclipse().configFile('config/eclipse-java-google-style.xml')
  }
}

checkstyle {
  toolVersion = "${checkstyleVersion}"
  config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
  configProperties['org.checkstyle.google.suppressionfilter.config'] = file("${project.rootDir}/config/checkstyle-suppressions.xml").absolutePath
  ignoreFailures = false
  maxWarnings = 0
}

jacoco {
  toolVersion = '0.8.9'
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'SOURCEFILE'
      excludes = ['*Application.java']

      limit {
        counter = 'INSTRUCTION'
        value = 'COVEREDRATIO'
        minimum = 0.75
      }
    }
  }
}

jacocoTestReport {
  reports {
    xml.required = true
    xml.destination file("${buildDir}/reports/jacoco/report.xml")
  }
}

jib {
  to {
    tags = ['latest']
  }
}

afterEvaluate {
  if (!hasProperty('skipFormat')) {
    tasks.checkstyleMain.dependsOn tasks.spotlessApply
    tasks.checkstyleTest.dependsOn tasks.spotlessApply
    tasks.spotlessCheck.dependsOn tasks.spotlessApply
  } else {
    tasks.checkstyleMain.dependsOn tasks.spotlessCheck
    tasks.checkstyleTest.dependsOn tasks.spotlessCheck
  }
  if (System.env['CI'] == 'true') {
    tasks.jacocoTestReport.dependsOn tasks.jacocoTestCoverageVerification
    tasks.check.dependsOn tasks.jacocoTestReport
  }
}
